/* File: AuthorsDataAccessObjectImplementation.java
 * Author: Stanley Pieda
 * Date: 2015
 * Description: Demonstration of DAO Design Pattern with Servlet website
 * References:
 * Ram N. (2013).  Data Access Object Design Pattern or DAO Pattern [blog] Retrieved from
 * http://ramj2ee.blogspot.in/2013/08/data-access-object-design-pattern-or.html
 */
package dataaccesslayer;

import java.util.List;

import transferobjects.Author;

import java.util.ArrayList;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

public class AuthorsDaoImpl implements AuthorsDao{

	@Override
	public List<Author> getAllAuthors() {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<Author> authors = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT AuthorID, FirstName, LastName FROM Authors ORDER BY AuthorID");
			rs = pstmt.executeQuery();
			authors = new ArrayList<Author>();
			while(rs.next()){
				Author author = new Author();
				author.setAuthorID(new Integer(rs.getInt("AuthorID")));
				author.setFirstName(rs.getString("FirstName"));
				author.setLastName(rs.getString("LastName"));
				authors.add(author);
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return authors;
	}

	@Override
	public Author getAuthorByAuthorId(Integer authorID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Author author = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT AuthorID, FirstName, LastName FROM Authors WHERE AuthorID = ?");
			pstmt.setInt(1, authorID.intValue());
			rs = pstmt.executeQuery();
			while(rs.next()){
				author = new Author();
				author.setAuthorID(new Integer(rs.getInt("AuthorID")));
				author.setFirstName(rs.getString("FirstName"));
				author.setLastName(rs.getString("LastName"));
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return author;
	}

	@Override
	public void addAuthor(Author author) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			// do not insert AuthorID, it is generated by Database
			pstmt = con.prepareStatement(
					"INSERT INTO Authors (FirstName, LastName) " +
			        "VALUES(?, ?)");
			pstmt.setString(1, author.getFirstName());
			pstmt.setString(2, author.getLastName());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}

	@Override
	public void updateAuthor(Author author) {
			Connection con = null;
			PreparedStatement pstmt = null;
			try{
				DataSource ds = new DataSource();
				con = ds.createConnection();
				pstmt = con.prepareStatement(
						"UPDATE Authors SET FirstName = ?, " + 
				        "LastName = ? WHERE AuthorID = ?");
				pstmt.setString(1, author.getFirstName());
				pstmt.setString(2, author.getLastName());	
				pstmt.setInt(3, author.getAuthorID().intValue());
				pstmt.executeUpdate();
			}
			catch(SQLException e){
				e.printStackTrace();
			}
			finally{
				try{ if(pstmt != null){ pstmt.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
				try{ if(con != null){ con.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
			}
	}

	@Override
	public void deleteAuthor(Author author) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"DELETE FROM Authors WHERE AuthorID = ?");	
			pstmt.setInt(1, author.getAuthorID().intValue());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}
}
